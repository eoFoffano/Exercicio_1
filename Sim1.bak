	
Label Root
{
	Son: SECTOR
	Label SECTOR
	{
		Son: FIRM
		Label FIRM
		{
			Var: Price
			Var: Desired
			Var: Cost
			Param: degree_of_monopoly
			Param: markup
			Param: avg
			Param: sd
			Var: Quality
			Var: Competitiveness
			Var: Market_Share
			Var: MS_Adjusted

		}

		Var: Average
		Var: Maximum
		Param: MS_Adjus
		Param: Elast_Q
		Param: Elast_P
		Var: Consistency_Test

	}


}


DATA

Object: Root C	1

Object: SECTOR C	1
Var: Average 1 s + n n	1
Var: Maximum 0 s + n n
Param: MS_Adjus 0 n + n n	0.1
Param: Elast_Q 0 n + n n	1
Param: Elast_P 0 n + n n	1
Var: Consistency_Test 0 s + n n

Object: FIRM C	5
Var: Price 1 s + n n	1	1	1	1	1
Var: Desired 0 n + n n
Var: Cost 0 n + n n
Param: degree_of_monopoly 0 n + n n	0.5	0.5	0.5	0.5	0.5
Param: markup 0 n + n n	0.5	0.5	0.5	0.5	0.5
Param: avg 0 n + n n	5	5	5	5	5
Param: sd 0 n + n n	1	1	1	1	1
Var: Quality 1 n + n n	1	1	1	1	1
Var: Competitiveness 0 n + n n
Var: Market_Share 1 s + n n	0.2	0.2	0.2	0.2	0.2
Var: MS_Adjusted 0 s + n p

SIM_NUM 1
SEED 1
MAX_STEP 100
EQUATION fun_Exercicio_1.cpp
MODELREPORT report_Sim1.html

DESCRIPTION

Object_Root

END_DESCRIPTION

Object_SECTOR

END_DESCRIPTION

Variable_Average

_INIT_
All 1 instances equal to 1
END_DESCRIPTION

Variable_Maximum

END_DESCRIPTION

Parameter_MS_Adjus

END_DESCRIPTION

Parameter_Elast_Q

END_DESCRIPTION

Parameter_Elast_P

END_DESCRIPTION

Variable_Consistency_Test

END_DESCRIPTION

Object_FIRM

END_DESCRIPTION

Variable_Price

_INIT_
All 5 instances equal to 1
END_DESCRIPTION

Variable_Desired

END_DESCRIPTION

Variable_Cost

END_DESCRIPTION

Parameter_degree_of_monopoly

_INIT_
All 5 instances equal to 0.5
END_DESCRIPTION

Parameter_markup

END_DESCRIPTION

Parameter_avg

END_DESCRIPTION

Parameter_sd

END_DESCRIPTION

Variable_Quality

_INIT_
All 5 instances equal to 1
END_DESCRIPTION

Variable_Competitiveness

END_DESCRIPTION

Variable_Market_Share

_INIT_
All 5 instances equal to 0.2
END_DESCRIPTION

Variable_MS_Adjusted

END_DESCRIPTION


DOCUOBSERVE

END_DOCUOBSERVE


DOCUINITIAL

END_DOCUINITIAL


EQ_FILE

#include "fun_head_fast.h"

//Custo de cada firma é uma distribuição normal
//O preço desejado é o custo unitário presente ajustado por um markup fixo
//Preço é uma média ponderada entre o preço desejado e o preço médio de mercado no período anterior
//Os pesos dessa média são uma medida do grau de monopólio da firma

MODELBEGIN

EQUATION("Price")

v[0] = V("degree_of_monopoly");
v[1] = 1-v[0];
v[2] = V("Desired");
v[3] = AVEL("Price",1);

/*

	Versão alternativa #1
	
v[3] = VL("Average",1);

*/

RESULT((v[0]*v[2])+(v[1]*v[3]))

EQUATION("Average")
RESULT(AVE("Price"))

/*

	Versão alternativa #2
	
EQUATION("Average")

v[0] = 0;
v[2] = 0;
CYCLE(cur, "FIRM")
{
	v[1] = VS(cur,"Price");
	v[0] = v[0] + v[1];
	v[2] = v[2] + 1;
	
}
v[3] = v[0]/v[2];

RESULT(v[3])

*/

EQUATION("Desired")

v[0] = V("markup");
v[1] = V("Cost");
v[2] = 1 + v[0];

RESULT(v[1]*v[2])

EQUATION("Cost")

v[0] = V("avg");
v[1] = V("sd");
v[2] = norm(v[0],v[1]);

RESULT(v[2])

EQUATION("Maximum")

v[0] = 0;

CYCLE(cur,"FIRM")
{

	v[1] = VS(cur,"Price");
	
	if(v[1]>v[0])
		
		{
		
		v[0] = v[1];
		
		}
		
}

RESULT(v[0])

/*

	Versão alternativa #3?
	
EQUATION("Maximum")

v[0] = MAX("Price");

CYCLE(cur, "SECTOR")
{

	v[1] = SUM_CND("Price","Price","==",v[0]);
}

RESULT(v[1])

*/

/*

	Versão alternativa #4
	
EQUATION("Maximum")
RESULT(MAX("Price"))

*/

EQUATION("Quality")

v[0] = VL("Quality",1);
v[1] = uniform(0, 1);
v[2] = v[0]+v[1];

RESULT(v[2])

EQUATION("Competitiveness")

v[0] = V("Quality");
v[1] = V("Price");
v[2] = V("Elast_Q");
v[3] = V("Elast_P");
v[4] = (pow(v[0],v[2]))/(pow(v[1],v[3]));

RESULT(v[4])

EQUATION("Market_Share")

v[0] = VL("Market_Share",1);
v[1] = V("MS_Adjus");
v[2] = V("Competitiveness");
v[3] = AVE("Competitiveness");
v[4] = (v[2]/v[3]) - 1;
v[5] = v[0]*(1+(v[1]*v[4]));

RESULT(v[5])

EQUATION("Consistency_Test")

v[0] = SUM("Market_Share");

RESULT(v[0])

EQUATION("MS_Adjusted")

v[0] = V("Consistency_Test");

CYCLE(cur, "FIRM")
{
	v[1] = V("Market_Share");
	v[2] = v[1]/v[0];
}

RESULT(v[2])

MODELEND

void close_sim( void )
{
	
}

END_EQ_FILE
